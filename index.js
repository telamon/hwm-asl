import { schnorr } from '@noble/curves/secp256k1'
import { bytesToHex, hexToBytes } from '@noble/hashes/utils'

/**
 * @typedef {0|1} bit
 * @typedef {string} hexstring
 * @typedef {{age: number, sex: number, location: string}} ASL
 */

const GHM = '0123456789bcdefghjkmnpqrstuvwxyz' // (geohash-specific) Base32 map
const GHU = GHM.split('').reduce((h, l, i) => { h[l] = i; return h }, {})

export const SANE_DEFAULT = 15 // Somewhat sane

/**
 * Rolls keypairs until a matching public-key is found
 * @param {0|1|2|3} age values: 0: 16+, 1: 24+; 2: 32+; 3: 40+
 * @param {0|1|2|3} sex values: 0: Female, 1: Male, 2: Nonbinary, 3: Bot
 * @param {string} location a geohash
 * @param {number} [geobits] geohash bit-size; default: 15
 * @param {number} [maxTries] maximum number of rolls before giving up.
 * @returns {Uint8Array?} secret key if found within maxTries, null otherwise
 */
export function roll (age, sex, location, geobits = SANE_DEFAULT, maxTries = 500000) {
  const nbits = geobits + 4
  const buf = new Uint8Array(roundByte(nbits))
  const prefix = packGeo(location, geobits, buf)
  shift(prefix, sex & 0b10)
  shift(prefix, sex & 1)
  shift(prefix, age & 0b10)
  shift(prefix, age & 1)
  const mask = nbits % 8
    ? (1 << (nbits % 8)) - 1
    : 0xff
  console.info('Searching for', nbits, binstr(prefix), 'mask', mask.toString(2))
  // const max = 500000 // ~10second on my laptop
  const nBytes = prefix.length
  for (let i = 0; i < maxTries; i++) {
    const sk = schnorr.utils.randomPrivateKey()
    const pk = schnorr.getPublicKey(sk)
    let v = true
    for (let n = 0; v && n < nBytes; n++) {
      v = (n + 1 === nBytes)
        ? (pk[n] & mask) === (prefix[n] & mask)
        : v = pk[n] === prefix[n]
    }
    if (v) {
      console.log('PFX', binstr(prefix))
      console.log('KEY', binstr(pk))
      console.log('key found', bytesToHex(sk))
      return bytesToHex(sk)
    }
  }
}

/**
 * Holistically decodes ASL from a public key
 * @param {Uint8Array|hexstring} publicKey
 * @param {number} geobits geohash bit-size; default: 15
 * @returns {ASL}
 */
export function decodeASL (publicKey, geobits = SANE_DEFAULT) {
  if (typeof publicKey === 'string') publicKey = hexToBytes(publicKey)
  const age = unshift(publicKey) | unshift(publicKey) << 1
  const sex = unshift(publicKey) | unshift(publicKey) << 1
  const location = unpackGeo(publicKey, geobits)
  return { age, sex, location }
}

/**
 * Unpacks bitarray back into base32 string
 * @param {Uint8Array|Buffer|array} buf a byte array
 * @param {number} nBits number of bits to unpack
 * @returns {string} A geohash
 */
export function unpackGeo (buf, nBits = SANE_DEFAULT) {
  const nBytes = roundByte(nBits)
  if (buf.length < nBytes) throw new Error('BufferUnderflow, dst buffer too small')
  const cpy = []
  for (let i = 0; i < nBytes; i++) cpy[i] = buf[i]
  let str = ''
  let tmp = 0
  for (let n = 0; n < nBits; n++) {
    const bit = unshift(cpy)
    tmp = tmp | bit << (4 - (n % 5))
    if (n && !(n % 5)) {
      str += GHM.charAt(tmp)
      tmp = 0
    }
  }
  str += GHM.charAt(tmp)
  return str
}

/**
 * Bitpacks a geohash string containing quintets to arbitrary bit-precision
 *  'u120fw' <-- contains 30bits accurate to ~1.2 Kilometers
 *  References:
 *  Format specification:  https://en.m.wikipedia.org/wiki/Geohash
 *  Bitdepthchart: https://www.ibm.com/docs/en/streams/4.3.0?topic=334-geoh
ashes
 * @param {string} str A geohash string.
 * @param {number?} [nBits] precision in bits; default 12
 * @param {Uint8Array|Buffer|Array} destination buffer
 * @returns {Uint8Array} buffer containing binary geohash
 */
export function packGeo (str, nBits = SANE_DEFAULT, buf = undefined) {
  if (!nBits) nBits = Math.min(str.length * 5, 12)
  if (nBits < 5) throw new Error('precision has to be at least 5')
  const nBytes = roundByte(nBits)
  if (!buf) buf = new Uint8Array(nBytes)
  const val = str
    .split('')
    .reverse()
    .reduce((sum, c, b) => sum + (GHU[c] * (32 ** b)), 0)
  const bits = val.toString(2).slice(0, nBits).split('').reverse() // lsb
  for (const bit of bits) { // buf.writeUInt32BE(bits)
    shift(buf, bit === '0' ? 0 : 1) // msb
  }
  return buf
}

/*
 * Round bits upwards to closet byte
 * @type {(b: number) => number}
 */
export function roundByte (b) { return (b >> 3) + (b % 8 ? 1 : 0) }

/**
 * Treats buffer as a series of latched 8bit shift-registers
 * shifts all bits 1 step from low to high.
 * @param {bit} x The value to shift in
 * @param {Uint8Array|Buffer|array} inp The input buffer
 * @return {number} the previous last bit
 */
export function shift (x, inp = 0) {
  let c = inp ? 1 : 0
  for (let i = 0; i < x.length; i++) {
    const nc = (x[i] >> 7) & 1
    x[i] = (x[i] << 1) | c
    c = nc
  }
  return c
}

/**
 * Opposite of shift, shifts all bits 1 step towards low.
 * @param {bit} x The value to shift out
 * @param {Uint8Array|Buffer|array} inp The input buffer
 * @return {number} the previous first bit
 */
export function unshift (x, inp = 0) {
  let i = x.length
  let c = (inp ? 1 : 0) << 7
  while (i--) {
    const nc = (x[i] & 1) << 7
    x[i] = c | x[i] >> 1
    c = nc
  }
  return c ? 1 : 0
}

function binstr (x, cap, bs = true) {
  cap = cap || x.length * 8
  let str = ''
  for (let i = 0; i < x.length; i++) {
    for (let j = 0; j < 8; j++) {
      if (cap === i * 8 + j) str += '|'
      str += x[i] & (1 << j) ? '1' : '0'
    }
    if (bs) str += ' '
  }
  return str
}

let FLAGS = null
function buildFlagLUT () {
  if (FLAGS) return FLAGS
  const data = JSON.parse(FLJSON) // TODO: THEY're WRONG! Lon lat is swapped!!!!!!
  FLAGS = {}
  for (const f in data) {
    FLAGS[f] = packGeo(data[f], 40)
  }
  return FLAGS
}

export function xorDistance (a, b) {
  /* // TODO: dosen't work :'(
  let d = 0
  const n = Math.min(a.length, b.length, 4)
  for (let i = 0; i < n; i++) {
    d |= (a[i] ^ b[i]) << (i * 8)
  }
  */
  // TODO: try inefficient way of shift(out, unshift(a) ^ unshift(b))
  const out = new Uint8Array(4)
  const ac = Array.from(new Array(4)).map((_, i) => a[i] || 0)
  const bc = Array.from(new Array(4)).map((_, i) => b[i] || 0)
  console.log('A', binstr(ac))
  console.log('B', binstr(bc))
  for (let i = 0; i < 4 * 8; i++) shift(out, unshift(ac) ^ unshift(bc))
  console.log('X', binstr(out), out)
  const dv = new DataView(out.buffer)
  return dv.getUint32(0, true)
}

export function flagOf (hash, bits = SANE_DEFAULT) {
  const flags = buildFlagLUT()
  const src = packGeo(hash, bits)
  const sorted = Object.keys(flags)
    .map(f => [f, xorDistance(src, flags[f])])
    .sort((a, b) => a[1] - b[1])
  console.log(sorted)
  debugger
  return sorted.slice(0, 3)
}
// 'fun' ISO-3166 alternative kindly provided by ChatGPT
const FLJSON = '{"ğŸ‡¦ğŸ‡¨":"7v6q74tdc4k0","ğŸ‡¦ğŸ‡©":"sbq0xm01hs4d","ğŸ‡¦ğŸ‡ª":"u98dm48yjj6y","ğŸ‡¦ğŸ‡«":"uu01hq1xq6g4","ğŸ‡¦ğŸ‡¬":"hmh0knr3ckne","ğŸ‡¦ğŸ‡®":"hkucnweyfbb4","ğŸ‡¦ğŸ‡±":"sgt68rwbv7se","ğŸ‡¦ğŸ‡²":"ubh2pycqt8yr","ğŸ‡¦ğŸ‡´":"eg0j9jf7n0mq","ğŸ‡¦ğŸ‡¶":"h00000000000","ğŸ‡¦ğŸ‡·":"5jx7uefqe2gn","ğŸ‡¦ğŸ‡¸":"58jb5200j850","ğŸ‡¦ğŸ‡¹":"t4fm1hb0k3x3","ğŸ‡¦ğŸ‡º":"grypbzgxzzcr","ğŸ‡¦ğŸ‡¼":"h78cuytt4g8b","ğŸ‡¦ğŸ‡½":"t7dc33s8u8vv","ğŸ‡¦ğŸ‡¿":"ubuexw10uvjy","ğŸ‡§ğŸ‡¦":"sgphx66s4xh7","ğŸ‡§ğŸ‡§":"hm3mk0rx8phb","ğŸ‡§ğŸ‡©":"uxbzvzfpupyr","ğŸ‡§ğŸ‡ª":"t0u0v0hn3zev","ğŸ‡§ğŸ‡«":"kr8xn7xxj09v","ğŸ‡§ğŸ‡¬":"sunkete","ğŸ‡§ğŸ‡­":"u8fx9jjhnph7","ğŸ‡§ğŸ‡®":"evmd5nxf1p4q","ğŸ‡§ğŸ‡¯":"s0qt5v9dt0kj","ğŸ‡§ğŸ‡±":"hkgfscx92xbv","ğŸ‡§ğŸ‡²":"hsqzx5vc479s","ğŸ‡§ğŸ‡³":"upgpzpyxbpuz","ğŸ‡§ğŸ‡´":"5eukmr3b6f47","ğŸ‡§ğŸ‡¶":"h7bete18pqex","ğŸ‡§ğŸ‡·":"5xkz2fv21j89","ğŸ‡§ğŸ‡¸":"hd1z9wmmv7zp","ğŸ‡§ğŸ‡¹":"uxge605hrmfe","ğŸ‡§ğŸ‡»":"t2e7hn4cep2t","ğŸ‡§ğŸ‡¼":"es2h7vszunzs","ğŸ‡§ğŸ‡¾":"thyhyhnm34cd","ğŸ‡§ğŸ‡¿":"h2hnzptm9wq2","ğŸ‡¨ğŸ‡¦":"j4833edzvejj","ğŸ‡¨ğŸ‡¨":"g9z7gnn6cx74","ğŸ‡¨ğŸ‡©":"egv5u153sg9m","ğŸ‡¨ğŸ‡«":"s5k9wkwj1b17","ğŸ‡¨ğŸ‡¬":"efzf4c3gp1nu","ğŸ‡¨ğŸ‡­":"t13637gbppup","ğŸ‡¨ğŸ‡®":"kpj27w4my9x7","ğŸ‡¨ğŸ‡°":"580bh8pbj00b","ğŸ‡¨ğŸ‡±":"572nndv7vdr4","ğŸ‡¨ğŸ‡²":"s449rtfh8fug","ğŸ‡¨ğŸ‡³":"uzurupcrgrbp","ğŸ‡¨ğŸ‡´":"h4g6e5tdwzy8","ğŸ‡¨ğŸ‡µ":"hmzxd9xrz5gd","ğŸ‡¨ğŸ‡·":"h1p19vt7t6zb","ğŸ‡¨ğŸ‡º":"h927mvwgcbvk","ğŸ‡¨ğŸ‡»":"k7f9xyu18pu1","ğŸ‡¨ğŸ‡¼":"h78xsbv8h5z7","ğŸ‡¨ğŸ‡½":"5ubw4r0k5s7m","ğŸ‡¨ğŸ‡¾":"svbypmdr23n1","ğŸ‡¨ğŸ‡¿":"t4ed5krf78zp","ğŸ‡©ğŸ‡ª":"t4mk707cu9n7","ğŸ‡©ğŸ‡¯":"sr8qt0dfbb9e","ğŸ‡©ğŸ‡°":"t4px6zypehvj","ğŸ‡©ğŸ‡²":"hm4fygbb95n9","ğŸ‡©ğŸ‡´":"h7t6476fv6q7","ğŸ‡©ğŸ‡¿":"sbd5hr5m38e9","ğŸ‡ªğŸ‡¨":"5fn9w76ecvyk","ğŸ‡ªğŸ‡ª":"tk3sv67b1mqr","ğŸ‡ªğŸ‡¬":"stt3ewm9jk82","ğŸ‡ªğŸ‡­":"sq6z9qv63sv0","ğŸ‡ªğŸ‡·":"sqfucrv718mh","ğŸ‡ªğŸ‡¸":"kzkdztwxg9wk","ğŸ‡ªğŸ‡¹":"snys2pehtcw4","ğŸ‡ªğŸ‡º":"t1dw7gxe1ugg","ğŸ‡«ğŸ‡®":"tks43p7f0h7e","ğŸ‡«ğŸ‡¯":"gxgruzvrzzgx","ğŸ‡«ğŸ‡°":"585050j8n048","ğŸ‡«ğŸ‡²":"upvrbzzpvpbx","ğŸ‡«ğŸ‡´":"mqu08mszf55e","ğŸ‡«ğŸ‡·":"t06tru0q93c7","ğŸ‡¬ğŸ‡¦":"s40d433jxt40","ğŸ‡¬ğŸ‡§":"mpuxk0f89mth","ğŸ‡¬ğŸ‡©":"hm0dgeybwgj1","ğŸ‡¬ğŸ‡ª":"szvwv6240k3h","ğŸ‡¬ğŸ‡«":"hndcc88xf906","ğŸ‡¬ğŸ‡¬":"mpe17mxu3vz5","ğŸ‡¬ğŸ‡­":"kpgyzw06pst8","ğŸ‡¬ğŸ‡®":"kz19w3kvj8ts","ğŸ‡¬ğŸ‡±":"m86vxsp7gygg","ğŸ‡¬ğŸ‡²":"km38cuvh1q82","ğŸ‡¬ğŸ‡³":"knr0f6f1jq8z","ğŸ‡¬ğŸ‡µ":"hqe9f0ezccp4","ğŸ‡¬ğŸ‡¶":"s1c4mt4nf7m9","ğŸ‡¬ğŸ‡·":"su5nbr6ywww4","ğŸ‡¬ğŸ‡¸":"6c3q1kjtf2s8","ğŸ‡¬ğŸ‡¹":"h250p0j0n0n8","ğŸ‡¬ğŸ‡º":"urcxczvzfzux","ğŸ‡¬ğŸ‡¼":"km23ss7py0kd","ğŸ‡¬ğŸ‡¾":"hje2y854xw8b","ğŸ‡­ğŸ‡°":"urzzvxuxczyp","ğŸ‡­ğŸ‡²":"gxcpurczyxbp","ğŸ‡­ğŸ‡³":"h2dv3u5sd2eg","ğŸ‡­ğŸ‡·":"t48n6r0f6jm7","ğŸ‡­ğŸ‡¹":"h7jkrxwkm020","ğŸ‡­ğŸ‡º":"t53u2f4vjq91","ğŸ‡®ğŸ‡¨":"kthp7v12dn3u","ğŸ‡®ğŸ‡©":"gzgxfxyzurzp","ğŸ‡®ğŸ‡ª":"mnvuqh25h7qp","ğŸ‡®ğŸ‡±":"swq86fkyxj3q","ğŸ‡®ğŸ‡²":"mpnw4hj92sxq","ğŸ‡®ğŸ‡³":"utsqthjdw58r","ğŸ‡®ğŸ‡´":"58jb50n2j8j8","ğŸ‡®ğŸ‡¶":"sxzsqhe7k2mx","ğŸ‡®ğŸ‡·":"u9x13vt72bdf","ğŸ‡®ğŸ‡¸":"mkn5qq0ejyyk","ğŸ‡®ğŸ‡¹":"sfjz2zf4mvpt","ğŸ‡¯ğŸ‡ª":"mpdgzuhb68uk","ğŸ‡¯ğŸ‡²":"h6kgh47n8m8r","ğŸ‡¯ğŸ‡´":"swqsrrejju5x","ğŸ‡¯ğŸ‡µ":"uzcrupurcxup","ğŸ‡°ğŸ‡ª":"eyx16x5p5gsm","ğŸ‡°ğŸ‡¬":"uvm33du0h55w","ğŸ‡°ğŸ‡­":"urbzvzypfpcp","ğŸ‡°ğŸ‡®":"h00bn0p8pbn0","ğŸ‡°ğŸ‡²":"g8rw3v2bkqw1","ğŸ‡°ğŸ‡³":"hku6fdtp4e0m","ğŸ‡°ğŸ‡µ":"uzuxvzyxgzcx","ğŸ‡°ğŸ‡·":"uzfxyzgpfzux","ğŸ‡°ğŸ‡¼":"u8ky55b1s159","ğŸ‡°ğŸ‡¾":"hkvwprp","ğŸ‡°ğŸ‡¿":"v5fhsxnfccbu","ğŸ‡±ğŸ‡¦":"urypgzfzvrfr","ğŸ‡±ğŸ‡§":"sy2h42s1p9mb","ğŸ‡±ğŸ‡¨":"hm1vhe0","ğŸ‡±ğŸ‡®":"t19w3790prwt","ğŸ‡±ğŸ‡°":"unmee0j1bdbf","ğŸ‡±ğŸ‡·":"knkd672v1tfc","ğŸ‡±ğŸ‡¸":"em4bw5y8xkd2","ğŸ‡±ğŸ‡¹":"thr5zqvhh0yh","ğŸ‡±ğŸ‡º":"t156vef7s87b","ğŸ‡±ğŸ‡»":"tk27yqfkn8zu","ğŸ‡±ğŸ‡¾":"se4dp22dh7cu","ğŸ‡²ğŸ‡¦":"kwwsg6q40q9x","ğŸ‡²ğŸ‡¨":"scr45m3qdw4f","ğŸ‡²ğŸ‡©":"tj19qus4dkem","ğŸ‡²ğŸ‡ª":"sgqq5z580cfv","ğŸ‡²ğŸ‡«":"s2etfpegcfz5","ğŸ‡²ğŸ‡¬":"g86ddkk86c2p","ğŸ‡²ğŸ‡­":"upvpfrbzzzzz","ğŸ‡²ğŸ‡°":"sgvedyd7w9sz","ğŸ‡²ğŸ‡±":"krk3rbd86yrd","ğŸ‡²ğŸ‡²":"urzxfxyzurzp","ğŸ‡²ğŸ‡³":"vpcrfrupzrux","ğŸ‡²ğŸ‡´":"urzzcpuxgpyr","ğŸ‡²ğŸ‡µ":"urfxzxczyxfp","ğŸ‡²ğŸ‡¶":"hm4kv4vs78te","ğŸ‡²ğŸ‡·":"kqncy033px19","ğŸ‡²ğŸ‡¸":"hkuq5p4k4s7m","ğŸ‡²ğŸ‡¹":"sf99cbbyu2y1","ğŸ‡²ğŸ‡º":"gd1x2vn9zgtj","ğŸ‡²ğŸ‡»":"uj460vuhqshu","ğŸ‡²ğŸ‡¼":"ewne4kks8rj9","ğŸ‡²ğŸ‡½":"h2jb40n2h2hb","ğŸ‡²ğŸ‡¾":"upfzzzczzzbr","ğŸ‡²ğŸ‡¿":"ew6dp7bnctmr","ğŸ‡³ğŸ‡¦":"e7r9jw4f3hks","ğŸ‡³ğŸ‡¨":"gxbpvruzypuz","ğŸ‡³ğŸ‡ª":"s3ktbxjx76p6","ğŸ‡³ğŸ‡«":"gpfzvrcpfzyp","ğŸ‡³ğŸ‡¬":"s1w3qem1r95","ğŸ‡³ğŸ‡®":"h2c5kb821d9t","ğŸ‡³ğŸ‡±":"t0v5zeqz44gq","ğŸ‡³ğŸ‡´":"t3e00jdqgtrk","ğŸ‡³ğŸ‡µ":"uwunw4k9c4hn","ğŸ‡³ğŸ‡·":"gzzxupgrczup","ğŸ‡³ğŸ‡º":"grgrgpvpurfp","ğŸ‡³ğŸ‡¿":"gpfzvrcpfzyp","ğŸ‡´ğŸ‡²":"u6rm29k","ğŸ‡µğŸ‡¦":"h1y5dk3jekz8","ğŸ‡µğŸ‡ª":"5f33wyu15v1u","ğŸ‡µğŸ‡«":"5852j8n010h0","ğŸ‡µğŸ‡¬":"gzgxbrcxupvr","ğŸ‡µğŸ‡­":"urcpvpfxyzbr","ğŸ‡µğŸ‡°":"usmd7pys7z96","ğŸ‡µğŸ‡±":"t5tps90sbjzp","ğŸ‡µğŸ‡²":"jpc2s0q41xcx","ğŸ‡µğŸ‡³":"52n0j852j810","ğŸ‡µğŸ‡·":"hkhvnteux3th","ğŸ‡µğŸ‡¸":"swq8rn4bk0x0","ğŸ‡µğŸ‡¹":"ky7ecpstwvpe","ğŸ‡µğŸ‡¼":"upvrgpbpvzgx","ğŸ‡µğŸ‡¾":"5mx7d89snnj1","ğŸ‡¶ğŸ‡¦":"u9450vwzcdt0","ğŸ‡·ğŸ‡ª":"g9bgzw06yx26","ğŸ‡·ğŸ‡´":"th2wj3nf4hug","ğŸ‡·ğŸ‡¸":"sgxu7jthc2kg","ğŸ‡·ğŸ‡º":"tnxwhb04kkcu","ğŸ‡·ğŸ‡¼":"evq9gy7h5dx6","ğŸ‡¸ğŸ‡¦":"u80brw3jmgcy","ğŸ‡¸ğŸ‡§":"gzcpuxbpyzuz","ğŸ‡¸ğŸ‡¨":"gcuettbmmmm7","ğŸ‡¸ğŸ‡©":"smg10xr70mr8","ğŸ‡¸ğŸ‡ª":"t74ny1630zhm","ğŸ‡¸ğŸ‡¬":"upbzyzbxfpyz","ğŸ‡¸ğŸ‡­":"6v3qmp1bcqg0"}'
